#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>
// Definições de pinos e constantes
#define PPM_PIN A0 // Definir o pino de leitura do PPM
#define DHTPIN 2   // Pino de dados do sensor DHT
#define DHTTYPE DHT11 // Tipo de sensor DHT
// Configurações WiFi
const char* ssid = "FIAP-IBM";
const char* password = "Challenge@24!";
// Configurações MQTT
const char* mqtt_server = "20.197.242.29";
// Instâncias para componentes
WiFiClient espClient;
PubSubClient MQTT(espClient);
DHT dht(DHTPIN, DHTTYPE);            // Inicializar o sensor DHT
// Função para reconectar ao WiFi
void reconnectWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.println("Conectando ao WiFi...");
    }
    Serial.println("Conectado ao WiFi");
  }
}
// Função de callback para o MQTT
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mensagem recebida no tópico: ");
  Serial.println(topic);
}
// Inicializar WiFi
void initWiFi() {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando ao WiFi...");
  }
  Serial.println("WiFi conectado.");
}
// Inicializar MQTT
void initMQTT() {
  MQTT.setServer(mqtt_server, 1883);
  MQTT.setCallback(mqtt_callback);
}
// Função setup
void setup() {
  Serial.begin(115200);
  // Inicializar o sensor DHT
  dht.begin();
  // Conectar ao WiFi
  initWiFi();
  // Configurar o MQTT
  initMQTT();
}
// Função loop
void loop() {
  if (!MQTT.connected()) {
    reconnectWiFi();
  }
  MQTT.loop();
  // Leitura do valor de PPM
  int16_t ppmValue = analogRead(PPM_PIN);
  Serial.print("PPM Value: ");
  Serial.println(ppmValue);
  // Leitura da temperatura
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Falha ao ler do sensor DHT");
  } else {
    Serial.print("Temperatura: ");
    Serial.println(temperature);
    Serial.print("Umidade: ");
    Serial.println(humidity);
  }
  // Publicar dados via MQTT
  char msg[50];
  snprintf(msg, 50, "Temperatura: %.2f, Umidade: %.2f, PPM: %d", temperature, humidity, ppmValue);
  MQTT.publish("sensor/dados", msg);
  delay(2000); // Aguarde antes da próxima leitura
}
